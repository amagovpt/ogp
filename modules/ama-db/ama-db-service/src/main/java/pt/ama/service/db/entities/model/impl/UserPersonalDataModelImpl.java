/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package pt.ama.service.db.entities.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import pt.ama.service.db.entities.model.UserPersonalData;
import pt.ama.service.db.entities.model.UserPersonalDataModel;
import pt.ama.service.db.entities.model.UserPersonalDataSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the UserPersonalData service. Represents a row in the &quot;ogp_UserPersonalData&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link UserPersonalDataModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link UserPersonalDataImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see UserPersonalDataImpl
 * @see UserPersonalData
 * @see UserPersonalDataModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class UserPersonalDataModelImpl extends BaseModelImpl<UserPersonalData>
	implements UserPersonalDataModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a user personal data model instance should use the {@link UserPersonalData} interface instead.
	 */
	public static final String TABLE_NAME = "ogp_UserPersonalData";
	public static final Object[][] TABLE_COLUMNS = {
			{ "userId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "identificationId", Types.VARCHAR },
			{ "lawerId", Types.VARCHAR },
			{ "solicitorId", Types.VARCHAR },
			{ "notaryId", Types.VARCHAR },
			{ "passportId", Types.VARCHAR },
			{ "nationality", Types.VARCHAR },
			{ "authenticationType", Types.VARCHAR },
			{ "agreeFullName", Types.VARCHAR },
			{ "agreePortalUseData", Types.VARCHAR },
			{ "agreeEmail", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("identificationId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("lawerId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("solicitorId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("notaryId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("passportId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nationality", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("authenticationType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("agreeFullName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("agreePortalUseData", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("agreeEmail", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table ogp_UserPersonalData (userId LONG not null primary key,companyId LONG,identificationId VARCHAR(75) null,lawerId VARCHAR(75) null,solicitorId VARCHAR(75) null,notaryId VARCHAR(75) null,passportId VARCHAR(75) null,nationality VARCHAR(75) null,authenticationType VARCHAR(75) null,agreeFullName VARCHAR(75) null,agreePortalUseData VARCHAR(75) null,agreeEmail VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table ogp_UserPersonalData";
	public static final String ORDER_BY_JPQL = " ORDER BY userPersonalData.companyId ASC, userPersonalData.userId DESC";
	public static final String ORDER_BY_SQL = " ORDER BY ogp_UserPersonalData.companyId ASC, ogp_UserPersonalData.userId DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(pt.ama.service.db.entities.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.pt.ama.service.db.entities.model.UserPersonalData"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(pt.ama.service.db.entities.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.pt.ama.service.db.entities.model.UserPersonalData"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(pt.ama.service.db.entities.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.pt.ama.service.db.entities.model.UserPersonalData"),
			true);
	public static final long IDENTIFICATIONID_COLUMN_BITMASK = 1L;
	public static final long LAWERID_COLUMN_BITMASK = 2L;
	public static final long NATIONALITY_COLUMN_BITMASK = 4L;
	public static final long NOTARYID_COLUMN_BITMASK = 8L;
	public static final long PASSPORTID_COLUMN_BITMASK = 16L;
	public static final long SOLICITORID_COLUMN_BITMASK = 32L;
	public static final long USERID_COLUMN_BITMASK = 64L;
	public static final long COMPANYID_COLUMN_BITMASK = 128L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static UserPersonalData toModel(UserPersonalDataSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		UserPersonalData model = new UserPersonalDataImpl();

		model.setUserId(soapModel.getUserId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setIdentificationId(soapModel.getIdentificationId());
		model.setLawerId(soapModel.getLawerId());
		model.setSolicitorId(soapModel.getSolicitorId());
		model.setNotaryId(soapModel.getNotaryId());
		model.setPassportId(soapModel.getPassportId());
		model.setNationality(soapModel.getNationality());
		model.setAuthenticationType(soapModel.getAuthenticationType());
		model.setAgreeFullName(soapModel.getAgreeFullName());
		model.setAgreePortalUseData(soapModel.getAgreePortalUseData());
		model.setAgreeEmail(soapModel.getAgreeEmail());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<UserPersonalData> toModels(
		UserPersonalDataSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<UserPersonalData> models = new ArrayList<UserPersonalData>(soapModels.length);

		for (UserPersonalDataSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(pt.ama.service.db.entities.service.util.ServiceProps.get(
				"lock.expiration.time.pt.ama.service.db.entities.model.UserPersonalData"));

	public UserPersonalDataModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _userId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setUserId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _userId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return UserPersonalData.class;
	}

	@Override
	public String getModelClassName() {
		return UserPersonalData.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("userId", getUserId());
		attributes.put("companyId", getCompanyId());
		attributes.put("identificationId", getIdentificationId());
		attributes.put("lawerId", getLawerId());
		attributes.put("solicitorId", getSolicitorId());
		attributes.put("notaryId", getNotaryId());
		attributes.put("passportId", getPassportId());
		attributes.put("nationality", getNationality());
		attributes.put("authenticationType", getAuthenticationType());
		attributes.put("agreeFullName", getAgreeFullName());
		attributes.put("agreePortalUseData", getAgreePortalUseData());
		attributes.put("agreeEmail", getAgreeEmail());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		String identificationId = (String)attributes.get("identificationId");

		if (identificationId != null) {
			setIdentificationId(identificationId);
		}

		String lawerId = (String)attributes.get("lawerId");

		if (lawerId != null) {
			setLawerId(lawerId);
		}

		String solicitorId = (String)attributes.get("solicitorId");

		if (solicitorId != null) {
			setSolicitorId(solicitorId);
		}

		String notaryId = (String)attributes.get("notaryId");

		if (notaryId != null) {
			setNotaryId(notaryId);
		}

		String passportId = (String)attributes.get("passportId");

		if (passportId != null) {
			setPassportId(passportId);
		}

		String nationality = (String)attributes.get("nationality");

		if (nationality != null) {
			setNationality(nationality);
		}

		String authenticationType = (String)attributes.get("authenticationType");

		if (authenticationType != null) {
			setAuthenticationType(authenticationType);
		}

		String agreeFullName = (String)attributes.get("agreeFullName");

		if (agreeFullName != null) {
			setAgreeFullName(agreeFullName);
		}

		String agreePortalUseData = (String)attributes.get("agreePortalUseData");

		if (agreePortalUseData != null) {
			setAgreePortalUseData(agreePortalUseData);
		}

		String agreeEmail = (String)attributes.get("agreeEmail");

		if (agreeEmail != null) {
			setAgreeEmail(agreeEmail);
		}
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask = -1L;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask = -1L;

		_companyId = companyId;
	}

	@JSON
	@Override
	public String getIdentificationId() {
		if (_identificationId == null) {
			return StringPool.BLANK;
		}
		else {
			return _identificationId;
		}
	}

	@Override
	public void setIdentificationId(String identificationId) {
		_columnBitmask |= IDENTIFICATIONID_COLUMN_BITMASK;

		if (_originalIdentificationId == null) {
			_originalIdentificationId = _identificationId;
		}

		_identificationId = identificationId;
	}

	public String getOriginalIdentificationId() {
		return GetterUtil.getString(_originalIdentificationId);
	}

	@JSON
	@Override
	public String getLawerId() {
		if (_lawerId == null) {
			return StringPool.BLANK;
		}
		else {
			return _lawerId;
		}
	}

	@Override
	public void setLawerId(String lawerId) {
		_columnBitmask |= LAWERID_COLUMN_BITMASK;

		if (_originalLawerId == null) {
			_originalLawerId = _lawerId;
		}

		_lawerId = lawerId;
	}

	public String getOriginalLawerId() {
		return GetterUtil.getString(_originalLawerId);
	}

	@JSON
	@Override
	public String getSolicitorId() {
		if (_solicitorId == null) {
			return StringPool.BLANK;
		}
		else {
			return _solicitorId;
		}
	}

	@Override
	public void setSolicitorId(String solicitorId) {
		_columnBitmask |= SOLICITORID_COLUMN_BITMASK;

		if (_originalSolicitorId == null) {
			_originalSolicitorId = _solicitorId;
		}

		_solicitorId = solicitorId;
	}

	public String getOriginalSolicitorId() {
		return GetterUtil.getString(_originalSolicitorId);
	}

	@JSON
	@Override
	public String getNotaryId() {
		if (_notaryId == null) {
			return StringPool.BLANK;
		}
		else {
			return _notaryId;
		}
	}

	@Override
	public void setNotaryId(String notaryId) {
		_columnBitmask |= NOTARYID_COLUMN_BITMASK;

		if (_originalNotaryId == null) {
			_originalNotaryId = _notaryId;
		}

		_notaryId = notaryId;
	}

	public String getOriginalNotaryId() {
		return GetterUtil.getString(_originalNotaryId);
	}

	@JSON
	@Override
	public String getPassportId() {
		if (_passportId == null) {
			return StringPool.BLANK;
		}
		else {
			return _passportId;
		}
	}

	@Override
	public void setPassportId(String passportId) {
		_columnBitmask |= PASSPORTID_COLUMN_BITMASK;

		if (_originalPassportId == null) {
			_originalPassportId = _passportId;
		}

		_passportId = passportId;
	}

	public String getOriginalPassportId() {
		return GetterUtil.getString(_originalPassportId);
	}

	@JSON
	@Override
	public String getNationality() {
		if (_nationality == null) {
			return StringPool.BLANK;
		}
		else {
			return _nationality;
		}
	}

	@Override
	public void setNationality(String nationality) {
		_columnBitmask |= NATIONALITY_COLUMN_BITMASK;

		if (_originalNationality == null) {
			_originalNationality = _nationality;
		}

		_nationality = nationality;
	}

	public String getOriginalNationality() {
		return GetterUtil.getString(_originalNationality);
	}

	@JSON
	@Override
	public String getAuthenticationType() {
		if (_authenticationType == null) {
			return StringPool.BLANK;
		}
		else {
			return _authenticationType;
		}
	}

	@Override
	public void setAuthenticationType(String authenticationType) {
		_authenticationType = authenticationType;
	}

	@JSON
	@Override
	public String getAgreeFullName() {
		if (_agreeFullName == null) {
			return StringPool.BLANK;
		}
		else {
			return _agreeFullName;
		}
	}

	@Override
	public void setAgreeFullName(String agreeFullName) {
		_agreeFullName = agreeFullName;
	}

	@JSON
	@Override
	public String getAgreePortalUseData() {
		if (_agreePortalUseData == null) {
			return StringPool.BLANK;
		}
		else {
			return _agreePortalUseData;
		}
	}

	@Override
	public void setAgreePortalUseData(String agreePortalUseData) {
		_agreePortalUseData = agreePortalUseData;
	}

	@JSON
	@Override
	public String getAgreeEmail() {
		if (_agreeEmail == null) {
			return StringPool.BLANK;
		}
		else {
			return _agreeEmail;
		}
	}

	@Override
	public void setAgreeEmail(String agreeEmail) {
		_agreeEmail = agreeEmail;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			UserPersonalData.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public UserPersonalData toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (UserPersonalData)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		UserPersonalDataImpl userPersonalDataImpl = new UserPersonalDataImpl();

		userPersonalDataImpl.setUserId(getUserId());
		userPersonalDataImpl.setCompanyId(getCompanyId());
		userPersonalDataImpl.setIdentificationId(getIdentificationId());
		userPersonalDataImpl.setLawerId(getLawerId());
		userPersonalDataImpl.setSolicitorId(getSolicitorId());
		userPersonalDataImpl.setNotaryId(getNotaryId());
		userPersonalDataImpl.setPassportId(getPassportId());
		userPersonalDataImpl.setNationality(getNationality());
		userPersonalDataImpl.setAuthenticationType(getAuthenticationType());
		userPersonalDataImpl.setAgreeFullName(getAgreeFullName());
		userPersonalDataImpl.setAgreePortalUseData(getAgreePortalUseData());
		userPersonalDataImpl.setAgreeEmail(getAgreeEmail());

		userPersonalDataImpl.resetOriginalValues();

		return userPersonalDataImpl;
	}

	@Override
	public int compareTo(UserPersonalData userPersonalData) {
		int value = 0;

		if (getCompanyId() < userPersonalData.getCompanyId()) {
			value = -1;
		}
		else if (getCompanyId() > userPersonalData.getCompanyId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		if (getUserId() < userPersonalData.getUserId()) {
			value = -1;
		}
		else if (getUserId() > userPersonalData.getUserId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof UserPersonalData)) {
			return false;
		}

		UserPersonalData userPersonalData = (UserPersonalData)obj;

		long primaryKey = userPersonalData.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		UserPersonalDataModelImpl userPersonalDataModelImpl = this;

		userPersonalDataModelImpl._originalUserId = userPersonalDataModelImpl._userId;

		userPersonalDataModelImpl._setOriginalUserId = false;

		userPersonalDataModelImpl._originalIdentificationId = userPersonalDataModelImpl._identificationId;

		userPersonalDataModelImpl._originalLawerId = userPersonalDataModelImpl._lawerId;

		userPersonalDataModelImpl._originalSolicitorId = userPersonalDataModelImpl._solicitorId;

		userPersonalDataModelImpl._originalNotaryId = userPersonalDataModelImpl._notaryId;

		userPersonalDataModelImpl._originalPassportId = userPersonalDataModelImpl._passportId;

		userPersonalDataModelImpl._originalNationality = userPersonalDataModelImpl._nationality;

		userPersonalDataModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<UserPersonalData> toCacheModel() {
		UserPersonalDataCacheModel userPersonalDataCacheModel = new UserPersonalDataCacheModel();

		userPersonalDataCacheModel.userId = getUserId();

		userPersonalDataCacheModel.companyId = getCompanyId();

		userPersonalDataCacheModel.identificationId = getIdentificationId();

		String identificationId = userPersonalDataCacheModel.identificationId;

		if ((identificationId != null) && (identificationId.length() == 0)) {
			userPersonalDataCacheModel.identificationId = null;
		}

		userPersonalDataCacheModel.lawerId = getLawerId();

		String lawerId = userPersonalDataCacheModel.lawerId;

		if ((lawerId != null) && (lawerId.length() == 0)) {
			userPersonalDataCacheModel.lawerId = null;
		}

		userPersonalDataCacheModel.solicitorId = getSolicitorId();

		String solicitorId = userPersonalDataCacheModel.solicitorId;

		if ((solicitorId != null) && (solicitorId.length() == 0)) {
			userPersonalDataCacheModel.solicitorId = null;
		}

		userPersonalDataCacheModel.notaryId = getNotaryId();

		String notaryId = userPersonalDataCacheModel.notaryId;

		if ((notaryId != null) && (notaryId.length() == 0)) {
			userPersonalDataCacheModel.notaryId = null;
		}

		userPersonalDataCacheModel.passportId = getPassportId();

		String passportId = userPersonalDataCacheModel.passportId;

		if ((passportId != null) && (passportId.length() == 0)) {
			userPersonalDataCacheModel.passportId = null;
		}

		userPersonalDataCacheModel.nationality = getNationality();

		String nationality = userPersonalDataCacheModel.nationality;

		if ((nationality != null) && (nationality.length() == 0)) {
			userPersonalDataCacheModel.nationality = null;
		}

		userPersonalDataCacheModel.authenticationType = getAuthenticationType();

		String authenticationType = userPersonalDataCacheModel.authenticationType;

		if ((authenticationType != null) && (authenticationType.length() == 0)) {
			userPersonalDataCacheModel.authenticationType = null;
		}

		userPersonalDataCacheModel.agreeFullName = getAgreeFullName();

		String agreeFullName = userPersonalDataCacheModel.agreeFullName;

		if ((agreeFullName != null) && (agreeFullName.length() == 0)) {
			userPersonalDataCacheModel.agreeFullName = null;
		}

		userPersonalDataCacheModel.agreePortalUseData = getAgreePortalUseData();

		String agreePortalUseData = userPersonalDataCacheModel.agreePortalUseData;

		if ((agreePortalUseData != null) && (agreePortalUseData.length() == 0)) {
			userPersonalDataCacheModel.agreePortalUseData = null;
		}

		userPersonalDataCacheModel.agreeEmail = getAgreeEmail();

		String agreeEmail = userPersonalDataCacheModel.agreeEmail;

		if ((agreeEmail != null) && (agreeEmail.length() == 0)) {
			userPersonalDataCacheModel.agreeEmail = null;
		}

		return userPersonalDataCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(25);

		sb.append("{userId=");
		sb.append(getUserId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", identificationId=");
		sb.append(getIdentificationId());
		sb.append(", lawerId=");
		sb.append(getLawerId());
		sb.append(", solicitorId=");
		sb.append(getSolicitorId());
		sb.append(", notaryId=");
		sb.append(getNotaryId());
		sb.append(", passportId=");
		sb.append(getPassportId());
		sb.append(", nationality=");
		sb.append(getNationality());
		sb.append(", authenticationType=");
		sb.append(getAuthenticationType());
		sb.append(", agreeFullName=");
		sb.append(getAgreeFullName());
		sb.append(", agreePortalUseData=");
		sb.append(getAgreePortalUseData());
		sb.append(", agreeEmail=");
		sb.append(getAgreeEmail());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(40);

		sb.append("<model><model-name>");
		sb.append("pt.ama.service.db.entities.model.UserPersonalData");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>identificationId</column-name><column-value><![CDATA[");
		sb.append(getIdentificationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lawerId</column-name><column-value><![CDATA[");
		sb.append(getLawerId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>solicitorId</column-name><column-value><![CDATA[");
		sb.append(getSolicitorId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>notaryId</column-name><column-value><![CDATA[");
		sb.append(getNotaryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>passportId</column-name><column-value><![CDATA[");
		sb.append(getPassportId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nationality</column-name><column-value><![CDATA[");
		sb.append(getNationality());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>authenticationType</column-name><column-value><![CDATA[");
		sb.append(getAuthenticationType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>agreeFullName</column-name><column-value><![CDATA[");
		sb.append(getAgreeFullName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>agreePortalUseData</column-name><column-value><![CDATA[");
		sb.append(getAgreePortalUseData());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>agreeEmail</column-name><column-value><![CDATA[");
		sb.append(getAgreeEmail());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = UserPersonalData.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			UserPersonalData.class
		};
	private long _userId;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private long _companyId;
	private String _identificationId;
	private String _originalIdentificationId;
	private String _lawerId;
	private String _originalLawerId;
	private String _solicitorId;
	private String _originalSolicitorId;
	private String _notaryId;
	private String _originalNotaryId;
	private String _passportId;
	private String _originalPassportId;
	private String _nationality;
	private String _originalNationality;
	private String _authenticationType;
	private String _agreeFullName;
	private String _agreePortalUseData;
	private String _agreeEmail;
	private long _columnBitmask;
	private UserPersonalData _escapedModel;
}