/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package AMA.OpenGov.LocalDataSaveEmail.service.base;

import AMA.OpenGov.LocalDataSaveEmail.model.ogp_comments;
import AMA.OpenGov.LocalDataSaveEmail.service.ogp_commentsLocalService;
import AMA.OpenGov.LocalDataSaveEmail.service.persistence.ogp_commentsPersistence;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalServiceRegistry;
import com.liferay.portal.kernel.service.persistence.ClassNamePersistence;
import com.liferay.portal.kernel.service.persistence.UserPersistence;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.spring.extender.service.ServiceReference;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the ogp_comments local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link AMA.OpenGov.LocalDataSaveEmail.service.impl.ogp_commentsLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see AMA.OpenGov.LocalDataSaveEmail.service.impl.ogp_commentsLocalServiceImpl
 * @see AMA.OpenGov.LocalDataSaveEmail.service.ogp_commentsLocalServiceUtil
 * @generated
 */
@ProviderType
public abstract class ogp_commentsLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements ogp_commentsLocalService,
		IdentifiableOSGiService {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link AMA.OpenGov.LocalDataSaveEmail.service.ogp_commentsLocalServiceUtil} to access the ogp_comments local service.
	 */

	/**
	 * Adds the ogp_comments to the database. Also notifies the appropriate model listeners.
	 *
	 * @param ogp_comments the ogp_comments
	 * @return the ogp_comments that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public ogp_comments addogp_comments(ogp_comments ogp_comments) {
		ogp_comments.setNew(true);

		return ogp_commentsPersistence.update(ogp_comments);
	}

	/**
	 * Creates a new ogp_comments with the primary key. Does not add the ogp_comments to the database.
	 *
	 * @param id the primary key for the new ogp_comments
	 * @return the new ogp_comments
	 */
	@Override
	public ogp_comments createogp_comments(long id) {
		return ogp_commentsPersistence.create(id);
	}

	/**
	 * Deletes the ogp_comments with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param id the primary key of the ogp_comments
	 * @return the ogp_comments that was removed
	 * @throws PortalException if a ogp_comments with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public ogp_comments deleteogp_comments(long id) throws PortalException {
		return ogp_commentsPersistence.remove(id);
	}

	/**
	 * Deletes the ogp_comments from the database. Also notifies the appropriate model listeners.
	 *
	 * @param ogp_comments the ogp_comments
	 * @return the ogp_comments that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public ogp_comments deleteogp_comments(ogp_comments ogp_comments) {
		return ogp_commentsPersistence.remove(ogp_comments);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(ogp_comments.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return ogp_commentsPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link AMA.OpenGov.LocalDataSaveEmail.model.impl.ogp_commentsModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end) {
		return ogp_commentsPersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link AMA.OpenGov.LocalDataSaveEmail.model.impl.ogp_commentsModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end, OrderByComparator<T> orderByComparator) {
		return ogp_commentsPersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return ogp_commentsPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) {
		return ogp_commentsPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public ogp_comments fetchogp_comments(long id) {
		return ogp_commentsPersistence.fetchByPrimaryKey(id);
	}

	/**
	 * Returns the ogp_comments with the primary key.
	 *
	 * @param id the primary key of the ogp_comments
	 * @return the ogp_comments
	 * @throws PortalException if a ogp_comments with the primary key could not be found
	 */
	@Override
	public ogp_comments getogp_comments(long id) throws PortalException {
		return ogp_commentsPersistence.findByPrimaryKey(id);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery = new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(ogp_commentsLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(ogp_comments.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("id");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery getIndexableActionableDynamicQuery() {
		IndexableActionableDynamicQuery indexableActionableDynamicQuery = new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(ogp_commentsLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(ogp_comments.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName("id");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {
		actionableDynamicQuery.setBaseLocalService(ogp_commentsLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(ogp_comments.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("id");
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {
		return ogp_commentsLocalService.deleteogp_comments((ogp_comments)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {
		return ogp_commentsPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the ogp_commentses.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link AMA.OpenGov.LocalDataSaveEmail.model.impl.ogp_commentsModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of ogp_commentses
	 * @param end the upper bound of the range of ogp_commentses (not inclusive)
	 * @return the range of ogp_commentses
	 */
	@Override
	public List<ogp_comments> getogp_commentses(int start, int end) {
		return ogp_commentsPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of ogp_commentses.
	 *
	 * @return the number of ogp_commentses
	 */
	@Override
	public int getogp_commentsesCount() {
		return ogp_commentsPersistence.countAll();
	}

	/**
	 * Updates the ogp_comments in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param ogp_comments the ogp_comments
	 * @return the ogp_comments that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public ogp_comments updateogp_comments(ogp_comments ogp_comments) {
		return ogp_commentsPersistence.update(ogp_comments);
	}

	/**
	 * Returns the ogp_comments local service.
	 *
	 * @return the ogp_comments local service
	 */
	public ogp_commentsLocalService getogp_commentsLocalService() {
		return ogp_commentsLocalService;
	}

	/**
	 * Sets the ogp_comments local service.
	 *
	 * @param ogp_commentsLocalService the ogp_comments local service
	 */
	public void setogp_commentsLocalService(
		ogp_commentsLocalService ogp_commentsLocalService) {
		this.ogp_commentsLocalService = ogp_commentsLocalService;
	}

	/**
	 * Returns the ogp_comments persistence.
	 *
	 * @return the ogp_comments persistence
	 */
	public ogp_commentsPersistence getogp_commentsPersistence() {
		return ogp_commentsPersistence;
	}

	/**
	 * Sets the ogp_comments persistence.
	 *
	 * @param ogp_commentsPersistence the ogp_comments persistence
	 */
	public void setogp_commentsPersistence(
		ogp_commentsPersistence ogp_commentsPersistence) {
		this.ogp_commentsPersistence = ogp_commentsPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the class name local service.
	 *
	 * @return the class name local service
	 */
	public com.liferay.portal.kernel.service.ClassNameLocalService getClassNameLocalService() {
		return classNameLocalService;
	}

	/**
	 * Sets the class name local service.
	 *
	 * @param classNameLocalService the class name local service
	 */
	public void setClassNameLocalService(
		com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService) {
		this.classNameLocalService = classNameLocalService;
	}

	/**
	 * Returns the class name persistence.
	 *
	 * @return the class name persistence
	 */
	public ClassNamePersistence getClassNamePersistence() {
		return classNamePersistence;
	}

	/**
	 * Sets the class name persistence.
	 *
	 * @param classNamePersistence the class name persistence
	 */
	public void setClassNamePersistence(
		ClassNamePersistence classNamePersistence) {
		this.classNamePersistence = classNamePersistence;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.kernel.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.kernel.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.kernel.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		persistedModelLocalServiceRegistry.register("AMA.OpenGov.LocalDataSaveEmail.model.ogp_comments",
			ogp_commentsLocalService);
	}

	public void destroy() {
		persistedModelLocalServiceRegistry.unregister(
			"AMA.OpenGov.LocalDataSaveEmail.model.ogp_comments");
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return ogp_commentsLocalService.class.getName();
	}

	protected Class<?> getModelClass() {
		return ogp_comments.class;
	}

	protected String getModelClassName() {
		return ogp_comments.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = ogp_commentsPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = ogp_commentsLocalService.class)
	protected ogp_commentsLocalService ogp_commentsLocalService;
	@BeanReference(type = ogp_commentsPersistence.class)
	protected ogp_commentsPersistence ogp_commentsPersistence;
	@ServiceReference(type = com.liferay.counter.kernel.service.CounterLocalService.class)
	protected com.liferay.counter.kernel.service.CounterLocalService counterLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.ClassNameLocalService.class)
	protected com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService;
	@ServiceReference(type = ClassNamePersistence.class)
	protected ClassNamePersistence classNamePersistence;
	@ServiceReference(type = com.liferay.portal.kernel.service.ResourceLocalService.class)
	protected com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.UserLocalService.class)
	protected com.liferay.portal.kernel.service.UserLocalService userLocalService;
	@ServiceReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	@ServiceReference(type = PersistedModelLocalServiceRegistry.class)
	protected PersistedModelLocalServiceRegistry persistedModelLocalServiceRegistry;
}